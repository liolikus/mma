# Token Approval Events (for auto-revoke feature)
type TokenApproval @entity {
  id: ID!
  owner: String!
  spender: String!
  tokenAddress: String!
  amount: BigInt!

  # Metadata
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!

  # Risk assessment
  isUnlimited: Boolean!
  isRisky: Boolean!
  lastUsedAt: BigInt

  # Status tracking
  status: ApprovalStatus!
  revokedAt: BigInt
  revokedTxHash: String
}

enum ApprovalStatus {
  ACTIVE
  REVOKED
  EXPIRED
}

# Token Transfer Events (for spam detection)
type TokenTransfer @entity {
  id: ID!
  from: String!
  to: String!
  tokenAddress: String!
  amount: BigInt!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!

  # Spam detection flags
  isPotentialSpam: Boolean!
  isAirdrop: Boolean!
}

# Wallet Token Balances (for dust tracking)
type WalletTokenBalance @entity {
  id: ID!  # Format: wallet-token
  walletAddress: String!
  tokenAddress: String!
  balance: BigInt!

  # USD value estimation
  estimatedValueUSD: Float
  isDust: Boolean!  # < $1

  lastUpdatedBlock: BigInt!
  lastUpdatedTimestamp: BigInt!
}

# Token Metadata (for displaying token info)
type TokenMetadata @entity {
  id: ID!  # Token address
  address: String!
  name: String
  symbol: String
  decimals: Int!

  # Spam detection
  isVerified: Boolean!
  isSpam: Boolean!
  hasLiquidity: Boolean!

  # Activity tracking
  totalHolders: Int!
  totalTransfers: BigInt!
  firstSeenBlock: BigInt!
}

# Automated Actions Log (track what agent does)
type AutomatedAction @entity {
  id: ID!
  walletAddress: String!
  actionType: ActionType!

  # Details
  tokenAddress: String
  targetAddress: String  # Spender for revokes
  amount: BigInt

  # Execution
  transactionHash: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  gasUsed: BigInt!

  status: ActionStatus!
  errorMessage: String
}

enum ActionType {
  REVOKE_APPROVAL
  CONSOLIDATE_DUST
  REMOVE_SPAM
}

enum ActionStatus {
  PENDING
  COMPLETED
  FAILED
}

# Wallet Health Metrics (aggregated view)
type WalletHealth @entity {
  id: ID!  # Wallet address
  walletAddress: String!

  # Metrics
  activeApprovalsCount: Int!
  riskyApprovalsCount: Int!
  spamTokensCount: Int!
  dustTokensCount: Int!
  healthScore: Int!  # 0-100

  # Last update
  lastCalculatedAt: BigInt!
  lastActionAt: BigInt
}
